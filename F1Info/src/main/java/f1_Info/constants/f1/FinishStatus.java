package f1_Info.constants.f1;

import lombok.AllArgsConstructor;
import lombok.Getter;

import java.util.Arrays;

@Getter
@AllArgsConstructor
public enum FinishStatus {
    FINISHED("Finished"),
    DISQUALIFIED("Disqualified"),
    ACCIDENT("Accident"),
    COLLISION("Collision"),
    ENGINE("Engine"),
    GEARBOX("Gearbox"),
    TRANSMISSION("Transmission"),
    CLUTCH("Clutch"),
    HYDRAULICS("Hydraulics"),
    ELECTRICAL("Electrical"),
    PLUS_1_LAP("+1 Lap"),
    PLUS_2_LAPS("+2 Laps"),
    PLUS_3_LAPS("+3 Laps"),
    PLUS_4_LAPS("+4 Laps"),
    PLUS_5_LAPS("+5 Laps"),
    PLUS_6_LAPS("+6 Laps"),
    PLUS_7_LAPS("+7 Laps"),
    PLUS_8_LAPS("+8 Laps"),
    PLUS_9_LAPS("+9 Laps"),
    SPUN_OFF("Spun off"),
    RADIATOR("Radiator"),
    SUSPENSION("Suspension"),
    BRAKES("Brakes"),
    DIFFERENTIAL("Differential"),
    OVERHEATING("Overheating"),
    MECHANICAL("Mechanical"),
    TYRE("Tyre"),
    DRIVER_SEAT("Driver Seat"),
    PUNCTURE("Puncture"),
    DRIVESHAFT("Driveshaft"),
    RETIRED("Retired"),
    FUEL_PRESSURE("Fuel pressure"),
    FRONT_WING("Front wing"),
    WATER_PRESSURE("Water pressure"),
    REFUELLING("Refuelling"),
    WHEEL("Wheel"),
    THROTTLE("Throttle"),
    STEERING("Steering"),
    TECHNICAL("Technical"),
    ELECTRONICS("Electronics"),
    BROKEN_WING("Broken wing"),
    HEAT_SHIELD_FIRE("Heat shield fire"),
    EXHAUST("Exhaust"),
    OIL_LEAK("Oil leak"),
    PLUS_11_LAPS("+11 Laps"),
    WHEEL_RIM("Wheel rim"),
    WATER_LEAK("Water leak"),
    FUEL_PUMP("Fuel pump"),
    TRACK_ROD("Track rod"),
    PLUS_17_LAPS("+17 Laps"),
    OIL_PRESSURE("Oil pressure"),
    PLUS_13_LAPS("+13 Laps"),
    WITHDREW("Withdrew"),
    PLUS_12_LAPS("+12 Laps"),
    ENGINE_FIRE("Engine fire"),
    PLUS_26_LAPS("+26 Laps"),
    TYRE_PUNCTURE("Tyre puncture"),
    OUT_OF_FUEL("Out of fuel"),
    WHEEL_NUT("Wheel nut"),
    NOT_CLASSIFIED("Not classified"),
    PNEUMATICS("Pneumatics"),
    HANDLING("Handling"),
    REAR_WING("Rear wing"),
    FIRE("Fire"),
    WHEEL_BEARING("Wheel bearing"),
    PHYSICAL("Physical"),
    FUEL_SYSTEM("Fuel system"),
    OIL_LINE("Oil line"),
    FUEL_RIG("Fuel rig"),
    LAUNCH_CONTROL("Launch control"),
    INJURED("Injured"),
    FUEL("Fuel"),
    POWER_LOSS("Power loss"),
    VIBRATIONS("Vibrations"),
    PERCENTAGE_107_RULE("107% Rule"),
    SAFETY("Safety"),
    DRIVETRAIN("Drivetrain"),
    IGNITION("Ignition"),
    DID_NOT_QUALIFY("Did not qualify"),
    INJURY("Injury"),
    CHASSIS("Chassis"),
    BATTERY("Battery"),
    STALLED("Stalled"),
    HALFSHAFT("Halfshaft"),
    CRANKSHAFT("Crankshaft"),
    PLUS_10_LAPS("+10 Laps"),
    SAFETY_CONCERNS("Safety concerns"),
    NOT_RESTARTED("Not restarted"),
    ALTERNATOR("Alternator"),
    UNDERWEIGHT("Underweight"),
    SAFETY_BELT("Safety belt"),
    OIL_PUMP("Oil pump"),
    FUEL_LEAK("Fuel leak"),
    EXCLUDED("Excluded"),
    DID_NOT_PREQUALIFY("Did not prequalify"),
    INJECTION("Injection"),
    DISTRIBUTOR("Distributor"),
    DRIVER_UNWELL("Driver unwell"),
    TURBO("Turbo"),
    CV_JOINT("CV joint"),
    WATER_PUMP("Water pump"),
    FATAL_ACCIDENT("Fatal accident"),
    SPARK_PLUGS("Spark plugs"),
    FUEL_PIPE("Fuel pipe"),
    EYE_INJURY("Eye injury"),
    OIL_PIPE("Oil pipe"),
    AXLE("Axle"),
    WATER_PIPE("Water pipe"),
    PLUS_14_LAPS("+14 Laps"),
    PLUS_15_LAPS("+15 Laps"),
    PLUS_25_LAPS("+25 Laps"),
    PLUS_18_LAPS("+18 Laps"),
    PLUS_22_LAPS("+22 Laps"),
    PLUS_16_LAPS("+16 Laps"),
    PLUS_24_LAPS("+24 Laps"),
    PLUS_29_LAPS("+29 Laps"),
    PLUS_23_LAPS("+23 Laps"),
    PLUS_21_LAPS("+21 Laps"),
    MAGNETO("Magneto"),
    PLUS_44_LAPS("+44 Laps"),
    PLUS_30_LAPS("+30 Laps"),
    PLUS_19_LAPS("+19 Laps"),
    PLUS_46_LAPS("+46 Laps"),
    SUPERCHARGER("Supercharger"),
    PLUS_20_LAPS("+20 Laps"),
    PLUS_42_LAPS("+42 Laps"),
    ENGINE_MISFIRE("Engine misfire"),
    COLLISION_DAMAGE("Collision damage"),
    POWER_UNIT("Power Unit"),
    ERS("ERS"),
    BRAKE_DUCT("Brake duct"),
    SEAT("Seat"),
    DAMAGE("Damage"),
    DEBRIS("Debris"),
    ILLNESS("Illness");

    private final String mStringCode;

    public static FinishStatus fromStringCode(final String stringCode) {
        return Arrays.stream(values())
            .filter(finishStatus -> finishStatus.mStringCode.equals(stringCode))
            .findFirst()
            .orElseThrow(() -> new IllegalArgumentException(String.format("Unable to parse the string code: %s to a valid finish status", stringCode)));
    }

    public static boolean exists(final String stringCode) {
        return Arrays.stream(values()).anyMatch(finishStatus -> finishStatus.mStringCode.equals(stringCode));
    }
}
